/*
 * Syntatic.hh
 *
 *  Created on: Feb 25, 2017
 *      Author: eshinig
 */
#include <iostream>
#include <map>
#include <list>
#include <queue>
#include <stack>
#include <vector>
#include <algorithm>
#ifndef SRC_SYNTATIC_HH_
#define SRC_SYNTATIC_HH_

class Parser
{
public:
    Parser();
    void tableDrivenParserAlgorithm();
    bool isTerminal(std::string& x);

    std::list <std::string> derivation;
    std::list <std::string> inverseDerivation; //stack
    std::vector<std::string> terminalSymbols = {"class","id","{","}",";","(",")","program","for","+","-","[","]","integer","float","int",",","=","<","<=","<>","==",">",">=","or","*","/","and","$"};
    std::map  <std::string,int> terminalSymbolsMap =
    {
            // {0,"class","id","{","}",";","(",")","program","for","+","-","[","]","integer","float","int",",","=","<","<=","<>","==",">",">=","or","*","/","and","$"},
            {"class", 1},
            {"id", 2},
            {"{", 3},
            {"}", 4},
            {";", 5},
            {"(", 6},
            {")", 7},
            {"program", 8},
            {"for", 9},
            {"+", 10},
            {"-", 11},
            {"[", 12},
            {"]", 13},
            {"integer", 14},
            {"float", 15},
            {"int", 16},
            {",", 17},
            {"=", 18},
            {"<", 19},
            {"<=", 20},
            {"<>", 21},
            {"==", 22},
            {">", 23},
            {">=", 24},
            {"or", 25},
            {"*", 26},
            {"/", 27},
            {"and", 28},
            {"$", 29},
            };
    std::map  <std::string,int> nonTerminalSymbolsMap =
    {
            {"prog",1},
            {"N_classDecl",2},
            {"classDecl",3},
            {"RvarDeclfuncDef",4},
            {"varDeclfuncDef",5},
            {"varDeclNoTypeIDorfuncDefNoTypeID",6},
            {"varDeclNoTypeID",7},
            {"funcDefNoTypeID",8},
            {"N_varDecl",9},
            {"N_funcDef",10},
            {"progBody",11},
            {"funcHead",12},
            {"funcDef",13},
            {"funcBody",14},
            {"N_statement",15},
            {"varDecl",16},
            {"N_arraySize",17},
            {"statement",18},
            {"assignStat",19},
            {"statBlock",20},
            {"expr",21},
            {"COMM",22},
            {"relExpr",23},
            {"arithExpr",24},
            {"arithExprLR",25},
            {"sign",26},
            {"term",27},
            {"termLR",28},
            {"factor",29},
            {"N_idnest_id",30},
            {"variable",31},
            {"N_idnest",32},
            {"idnest",33},
            {"N_indice",34},
            {"indice",35},
            {"arraySize",36},
            {"type",37},
            {"fParams",38},
            {"N_fParamsTail",39},
            {"aParams",40},
            {"N_aParamsTail",41},
            {"fParamsTail",42},
            {"aParamsTail",43},
            {"assignOp",44},
            {"relOp",45},
            {"addOp",46},
            {"multiOp",47},
    };

    int parseTable[48][30] =
    {
           // {0,"class","id","{","}",";","(",")","program","for","+","-","[","]","integer","float","int",",","=","<","<=","<>","==",">",">=","or","*","/","and","$"},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,1,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,70},
            {0,2,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,3},
            {0,4,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,70},
            {0,71,5,71,6,71,71,71,71,71,71,71,71,71,71,5,5,71,71,71,71,71,71,71,71,71,71,71,71,71},
            {0,71,7,71,70,71,71,71,71,71,71,71,71,71,71,7,7,71,71,71,71,71,71,71,71,71,71,71,71,71},
            {0,71,70,71,70,71,9,71,71,71,71,71,8,71,71,70,70,71,71,71,71,71,71,71,71,71,71,71,71,71},
            {0,71,70,71,70,71,71,71,71,71,71,71,10,71,71,70,70,71,71,71,71,71,71,71,71,71,71,71,71,71},
            {0,71,70,71,70,71,11,71,71,71,71,71,71,71,71,70,70,71,71,71,71,71,71,71,71,71,71,71,71,71},
            {0,71,12,71,71,71,71,71,71,13,71,71,71,71,71,12,12,71,71,71,71,71,71,71,71,71,71,71,71,71},
            {0,71,14,71,71,71,71,71,71,71,71,71,71,71,71,14,14,71,71,71,71,71,71,71,71,71,71,71,71,71},
            {0,71,71,71,71,71,71,71,16,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71},
            {0,71,17,70,71,71,71,71,71,71,71,71,71,71,71,17,17,71,71,71,71,71,71,71,71,71,71,71,71,71},
            {0,71,18,71,71,71,71,71,71,71,71,71,71,71,71,18,18,71,71,71,71,71,71,71,71,71,71,71,71,71},
            {0,71,71,19,71,70,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71},
            {0,71,71,71,70,71,71,71,71,20,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71},
            {0,71,21,71,71,71,71,71,71,70,71,71,71,71,71,21,21,71,71,71,71,71,71,71,71,71,71,71,71,71},
            {0,71,71,71,71,70,71,71,71,71,71,71,22,71,71,71,71,70,71,71,71,71,71,71,71,71,71,71,71,71},
            {0,71,71,71,71,70,71,71,71,23,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71},
            {0,71,24,71,71,71,71,70,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71},
            {0,71,71,25,71,70,71,71,71,26,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71},
            {0,71,71,71,71,70,27,70,71,71,71,71,71,71,71,71,71,70,71,71,71,71,71,71,71,71,71,71,71,71},
            {0,71,71,71,71,28,71,28,71,71,71,71,71,71,71,71,71,28,71,29,29,29,29,29,29,71,71,71,71,71},
            {0,71,71,71,71,70,30,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71},
            {0,71,71,71,71,70,31,70,71,71,71,71,71,70,71,71,71,70,71,70,70,70,70,70,70,71,71,71,71,71},
            {0,71,71,71,71,70,71,70,71,71,32,32,71,70,71,71,71,70,71,70,70,70,70,70,70,32,71,71,71,71},
            {0,71,71,71,71,71,71,71,71,71,33,34,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71},
            {0,71,71,71,71,71,35,71,71,71,70,70,71,71,71,71,71,71,71,71,71,71,71,71,71,70,71,71,71,71},
            {0,71,71,71,71,71,71,71,71,71,70,70,71,71,71,71,71,71,71,71,71,71,71,71,71,70,36,36,36,71},
            {0,71,71,71,71,71,37,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,70,70,70,71},
            {0,71,71,71,71,71,38,71,71,71,71,71,39,71,71,71,71,71,70,71,71,71,71,71,71,71,71,71,71,71},
            {0,71,40,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,70,71,71,71,71,71,71,71,71,71,71,71},
            {0,71,41,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71},
            {0,71,42,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71},
            {0,71,44,71,71,71,71,71,71,71,71,71,43,71,71,71,71,71,44,71,71,71,71,71,71,71,71,71,71,71},
            {0,71,70,71,71,71,71,71,71,71,71,71,45,71,71,71,71,71,70,71,71,71,71,71,71,71,71,71,71,71},
            {0,71,71,71,71,71,71,71,71,71,71,71,46,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71},
            {0,71,48,71,71,71,71,71,71,71,71,71,71,71,71,47,49,71,71,71,71,71,71,71,71,71,71,71,71,71},
            {0,71,50,71,71,71,71,70,71,71,71,71,71,71,71,50,50,71,71,71,71,71,71,71,71,71,71,71,71,71},
            {0,71,71,71,71,71,71,70,71,71,71,71,71,71,71,71,71,51,71,71,71,71,71,71,71,71,71,71,71,71},
            {0,71,71,71,71,71,52,53,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71},
            {0,71,71,71,71,71,71,70,71,71,71,71,71,71,71,71,71,54,71,71,71,71,71,71,71,71,71,71,71,71},
            {0,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,55,71,71,71,71,71,71,71,71,71,71,71,71},
            {0,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,56,71,71,71,71,71,71,71,71,71,71,71,71},
            {0,71,71,71,71,71,70,71,71,71,71,71,71,71,71,71,71,71,57,71,71,71,71,71,71,71,71,71,71,71},
            {0,71,71,71,71,71,70,71,71,71,71,71,71,71,71,71,71,71,71,58,59,60,61,62,63,71,71,71,71,71},
            {0,71,71,71,71,71,70,71,71,71,64,65,71,71,71,71,71,71,71,71,71,71,71,71,71,66,71,71,71,71},
            {0,71,71,71,71,71,70,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,67,68,69,71}
    };

    std::map<int,std::list<std::string> > productions =
    {
            {1,  {"N_classDecl"}},        //prog â†’ N_classDecl
            {2, {"classDecl","N_classDecl"}},         //Ep
            {3, {"EPSILON"}},    //Ep
            {4,  {"class", "id","{" ,"RvarDeclfuncDef", "}" ,";"}},        //T
            {5, {"varDeclfuncDef","RvarDeclfuncDef"}},         //Tp
            {6, {"EPSILON"}},    //Tp
            {7,  {"type", "id", "varDeclNoTypeIDorfuncDefNoTypeID"}},    //F
            {8,  {"varDeclNoTypeID"}},              //F
            {9,  {"funcDefNoTypeID"}},              //F
            {10,  {"N_arraySize" ,";"}},        //E
            {11, {"(","fparam",")","funcBody",";"}},         //Ep
            {12, {"varDecl", "N_varDecl"}},    //Ep
            {13,  {"EPSILON"}},        //T
            {14,  {"funcDef", "N_funcDef"}},        //T
            {15, {"EPSILON"}},         //Tp
            {16, {"program", "funcBody", ";", "N_funcDef"}},    //Tp
            {17,  {"type", "id", "(", "fParams",")"}},    //F
            {18,  {"funcHead","funcBody",";"}},              //F
            {19,  {"{" "N_varDecl", "N_statement", "}"}},              //F
            {20,  {"statement", "N_statement"}},              //F
            {21,  {"type", "id", "N_arraySize", ";"}},        //E
            {22, {"arraySize", "N_arraySize"}},         //Ep
            {23, {"for", "(", "type","id", "assignOp", "expr", ";" , "relExpr", ";", "assignStat", ")" ,"statBlock" ,";"}},    //Ep
            {24,  {"variable", "assignOp", "expr"}},        //T
            {25, {"{", "N_statement", "}"}},         //Tp
            {26, {"statement"}},    //Tp
            {27,  {"arithExpr", "COMM"}},    //F
            {28,  {"EPSILON"}},              //F
            {29,  {"relOp", "arithExpr"}},              //F
            {30,  {"arithExpr", "relOp", "arithExpr"}},              //F
            {31,  {"term", "arithExprLR"}},        //E
            {32, {"addOp", "term", "arithExprLR"}},         //Ep
            {33, {"+"}},    //Ep
            {34,  {"-"}},        //T
            {35, {"factor", "termLR"}},         //Tp
            {36, {"multiOp", "factor", "termLR"}},    //Tp
            {37,  {"(", "arithExpr", ")"}},    //F
            {38,  {"(", "aParams", ")"}},              //F
            {39,  {"N_indice"}},              //F
            {40,  {"N_idnest","id","N_idnest_id"}},              //F
            {41,  {"idnest" ,"N_idnest"}},        //E
            {42, {"id","N_indice"}},         //Ep
            {43, {"indice", "N_indice"}},    //Ep
            {44,  {"EPSILON"}},        //T
            {45, { "[", "arithExpr", "]"}},         //Tp
            {46, {"[", "integer", "]"}},    //Tp
            {47,  {"float"}},    //F
            {48,  {"id"}},              //F
            {49,  {"int"}},              //
            {50,  {"type", "id", "N_arraySize", "N_fParamsTail"}},        //EF
            {51,  {"fParamsTail", "N_fParamsTail"}},        //EF
            {52,  {"expr" ,"N_aParamsTail"}},        //E
            {53, {"EPSILON"}},         //Ep
            {54, {"aParamsTail", "N_aParamsTail"}},    //Ep
            {55,  {",", "type","id", "N_arraySize"}},        //T
            {56, {",", "expr"}},         //Tp
            {57, {"="}},    //Tp
            {58,  {"<"}},    //F
            {59,  {"<="}},              //F
            {60,  {"<>"}},              //F
            {61,  {"=="}},        //E
            {62, {">"}},         //Ep
            {63, {">="}},    //Ep
            {64,  {"+"}},        //T
            {65, {"-"}},         //Tp
            {66, {"or"}},    //Tp
            {67,  {"*"}},    //F
            {68,  {"/"}},              //F
            {69,  {"and"}},              //F
    };

    //Implemented as Queue class id { int id [ integer ] ; int id [ integer ] ; } ;
    std::list <std::string> input = {"class","id","{","int","id","[", "integer","]",";","}",";"};

private:
    void printDerivation();
    void printInverseDerivation();
};
#endif /* SRC_SYNTATIC_HH_ */
